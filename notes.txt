
🧱 Here's what we’ll implement in the new chat, step-by-step:

✅ Pump.fun/Metis Program ID and how to find relevant accounts

✅ How to fetch all new tokens (on-chain, not scrape-only)

✅ Read bonding curve state from market vault

✅ Simulate price from bonding curve (what 0.001 SOL buys, next price, etc.)

✅ Detect activity (buys/sells) from logs or signatures

✅ Track dev wallet %, holder count, and token distribution

✅ Build logic to flag top opportunities

✅ (Optional) Send alerts or execute buy

-------------

🔄 Main Flow
Pump.fun Token Discovery

Scraper or Puppeteer watches for new tokens.

Adds to watchlist.json.

Tradability Check (Jupiter)

Runs Puppeteer check on new tokens.

If tradable → alert via Telegram + add to trades.json.

Trade Decision

If settings.autoTrade = true:

mode = 'paper' → simulate and record

mode = 'live' → trigger real swap via Jupiter

If autoTrade = false:

Telegram includes "Buy Now" or token info for manual buy

Track Profit

Periodically update token prices.

Calculate unrealized + realized profit.

Write to trades.json.

Dashboard (EJS + Tailwind)

Show:

Active trades

Completed trades

Stats (ROI, # trades, P/L)

Settings toggles

-----

✅ Why This Is Ideal for You:

No DB, fast read/write using JSON

Can run as a single node server.js instance

No bloat: simple watch → validate → alert/trade → track

Easy to extend: you can later add profit calc graphs or export logs

Works on a low-resource machine or VPS


🧱 Suggested Modules to Build in Order

 ✅ puppeteerCheck.js – you already have it!

 🔁 tokenScanner.js – scrapes Pump.fun for new tokens

 📦 watchlist.json manager – stores pending tokens

 🚨 telegram.js – alert on tradable token

 🤖 tradeHandler.js – handles auto/manual trades

 🧠 server.js + dashboard.ejs – displays trades & stats


-----------------------------------------------------------

✅ HIGH-LEVEL OVERVIEW

The app continuously scans Pump.fun → checks tradability via Jupiter → applies your custom rules → sends Telegram alerts → optionally trades → tracks and logs results.

No database. JSON only. Lightweight, fast, and inspectable via browser UI.

---

⚙️ FINAL MODULE FLOW

1. tokenScanner.js

Scrapes Pump.fun for new tokens

Skips already known tokens (via watchlist.json)

Appends new entries to watchlist.json

→ Triggered every 20s

---

2. puppeteerCheck.js

Loads Jupiter quote for each token in watchlist.json

If tradable → marks token .isTradable = true + .checkedAt = now

---

3. entryEvaluator.js ← NEW MODULE

Filters tradable tokens using your custom rules (age, volume, replies, etc.)

If token matches:

Logs match event

Sends Telegram alert

Adds to trades.json with status: "open"

If autoTrade === true: triggers live or paper trade

---

4. tradeHandler.js

Executes paper or live trades:

Paper → records fake price + timestamp

Live → executes real swap (Jupiter, Phantom, etc.)

Updates trades.json

---

5. profitUpdater.js

Rechecks prices every 2–5 min for open trades

Updates gainPercent and currentValue

Moves trades to status: "closed" if sold

---

6. telegram.js

Sends alerts:

New tradable token

Auto-trade entry

Profit updates

Optionally includes "Buy now" link or mint info

---

7. logger.js

All major actions log to:

logs/system.log (rolling)

logs/YYYY-MM-DD.log

Each log entry timestamped and JSON-stringified

---

8. settings.json

Easily modifiable in the browser

{
  "autoTrade": true,
  "mode": "paper",
  "investmentUSD": 5,
  "minReplies": 0,
  "minLiquidity": 3000,
  "minVolume": 2000,
  "minAgeSeconds": 30,
  "maxOpenTrades": 3,
  "telegramAlerts": true
}

---

9. trades.json

Tracks all trades for the day

[
  {
    "mint": "GZF3vXjK...",
    "name": "SLURCOIN",
    "entryPrice": 0.0000083,
    "entryTime": "2025-05-20T09:01:12Z",
    "status": "open",
    "mode": "paper",
    "gainPercent": 14.2,
    "currentPrice": 0.0000095,
    "exitTime": null
  }
]

---

10. Frontend (EJS + Tailwind)

/dashboard

Shows: open trades, completed trades, P/L

/settings

Modify config live

/logs

View latest logs

---

🔁 CORE LOOP FLOW (Every 20s or 60s):

tokenScanner.js → finds new tokens

puppeteerCheck.js → confirms tradability

entryEvaluator.js → applies your rules:

min age, replies, volume, liquidity

If matched → telegram.js + tradeHandler.js

profitUpdater.js → runs in background every X min

---

💡 Bonus Features (for later):

Manual “BUY” button in dashboard for each token

Simple profit chart (d3 or Chart.js, optional)

JSON backup/export buttons

---

🧱 FILE STRUCTURE (Confirmed)

/app
├── server.js
├── routes/
│   ├── dashboard.js
│   ├── api.js
│   └── settings.js
├── utils/
│   ├── tokenScanner.js
│   ├── puppeteerCheck.js
│   ├── entryEvaluator.js
│   ├── tradeHandler.js
│   ├── profitUpdater.js
│   ├── telegram.js
│   └── logger.js
├── data/
│   ├── trades.json
│   ├── settings.json
│   ├── watchlist.json
│   └── logs/
├── views/
│   ├── index.ejs
│   ├── settings.ejs
│   └── logs.ejs

---

✅ Final Thought

This structure is modular, debuggable, and auto-scalable without needing a DB or complex services.

If you're happy with this plan, we can:

Lock in your entry requirements inside settings.json

Review/refactor your current puppeteerCheck.js

Build entryEvaluator.js to bridge detection → alerts → trades

---------------------------------------------------

✅ Your Sniper App Plan: Phase Structure
Phase 1: Discovery
tokenScanner.js scrapes tokens every ~20s

Adds new tokens to watchlist.json

Includes metadata: createdAt, marketCapUSD, replies, etc.

Phase 2: Tradability
puppeteerCheck.js checks if token is tradable (via Jupiter)

Updates: isTradable, checkedAt, verified

✅ Phase 3: Performance Tracking (New)
Adds a new key: checkHistory: []

Every 1–2 minutes:

Fetch updated price, marketCapUSD, and other live metrics

Append to checkHistory:

js
Copy
Edit
{
  time: <timestamp>,
  priceUSD: 0.0000048,
  marketCapUSD: 4600
}
After N data points, analyze growth patterns:

Is priceUSD up 2x since first point?

Has marketCapUSD grown?

Has liquidity spiked?

Phase 4: Entry Evaluation
If token meets your performance-based strategy:

Flag alerted: true

Save entryPrice, entryTime

Send Telegram alert or trigger trade

🧱 Proposed JSON Structure for Each Token
json
Copy
Edit
{
  "name": "Slurcoin",
  "mint": "xxxxx...pump",
  "isTradable": true,
  "verified": true,
  "status": "tradable",
  "alerted": false,
  "entryPrice": 0,
  "createdAt": "...",
  "checkedAt": "...",
  "checkHistory": [
    {
      "time": "2025-05-20T17:30:00Z",
      "priceUSD": 0.00000483,
      "marketCapUSD": 4600
    },
    {
      "time": "2025-05-20T17:32:00Z",
      "priceUSD": 0.00000610,
      "marketCapUSD": 5700
    }
  ]
}
🔁 Flow Logic
✅ Check every 60s: loop through all isTradable && !alerted tokens.

✅ Fetch updated Jupiter quote

✅ Append to checkHistory

✅ Evaluate strategy after N points:

Price increased by >X%

Volume spike?

Stable growth for 3+ checks?

✅ If criteria hit:

Set alerted = true

Log/alert/auto-trade

📌 Next Step
Let’s build:

A new module: tracker.js

Adds to checkHistory every minute

(Optional) Caps history at last 5–6 entries per token to avoid file bloat